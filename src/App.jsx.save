
import { useState } from "react";
import "./App.css";

const apiKey = import.meta.env.VITE_OPENAI_API_KEY;

function App() {
  const [input, setInput] = useState("");
  const [answer, setAnswer] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setAnswer("");

    try {
const apiKey = import.meta.env.VITE_OPENAI_API_KEY;

const res = await fetch("https://api.openai.com/v1/chat/completions", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    Authorization: `Bearer ${apiKey}`,
  },
 body: JSON.stringify({
  model: "gpt-3.5-turbo",
  messages: [
    {
      role: "system",
      content: "You are Cow-sistant, a highly skilled Epic EMR support agent who always responds with a short, funny cow pun or joke that relates to the user's question — but only gives answers related to Epic. Assume every question is about Epic EMR, even if the user doesn’t say so directly. You are not allowed to answer anything unrelated to Epic. If the question is truly outside the scope of Epic, politely steer the user back to Epic workflows with a cow joke. Your answers must be accurate, detailed, and helpful to clinical staff, analysts, and implementation teams. Use clear language and Epic terminology. Respond like a helpful, funny agent disguised as a cow, but never let the humor get in the way of delivering an excellent, correct Epic answer."
    },
    {
      role: "user",
      content: input
    }
  ]
})

});






      const data = await res.json();
      const gptReply = data.choices?.[0]?.message?.content;
      setAnswer(gptReply || "No response received.");
    } catch (err) {
      setAnswer("Error fetching response. Check your API key or internet.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="app">
      <h1>DAMIEN's EpicCoach Web</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Ask a workflow question..."
          value={input}
          onChange={(e) => setInput(e.target.value)}
        />
        <button type="submit" disabled={loading}>
          {loading ? "Thinking..." : "Ask"}
        </button>
      </form>
      {answer && (
        <div className="response">
          <strong>Answer:</strong>
          <p>{answer}</p>
        </div>
      )}
    </div>
  );
}
export default App;
npm run dev

