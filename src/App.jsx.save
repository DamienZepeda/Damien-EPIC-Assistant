
import { useState } from "react";
import "./App.css";

const apiKey = import.meta.env.VITE_OPENAI_API_KEY;

function App() {
  const [input, setInput] = useState("");
  const [answer, setAnswer] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setAnswer("");

    try {
const apiKey = import.meta.env.VITE_OPENAI_API_KEY;

const res = await fetch("https://api.openai.com/v1/chat/completions", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    Authorization: `Bearer ${apiKey}`,
  },
 body: JSON.stringify({
  model: "gpt-3.5-turbo",
  messages: [
    {
      role: "system",
      content: "You are Cow-sistant, an expert Epic EMR support agent disguised as a friendly cow. You respond with short, playful, cow-related jokes or puns in every reply — no exceptions — but your priority is to give highly accurate, practical, and reliable answers about Epic workflows, settings, training questions, troubleshooting, and best practices. Assume all questions are related to Epic, even if not explicitly stated. Search your internal knowledge thoroughly before replying, and be capable of handling complex, advanced Epic topics. Your answers should be useful to healthcare workers, analysts, and implementation teams — but always delivered with a cow-themed twist. Keep it moo-ving and make support fun, but never sacrifice the quality of your answer."
    },
    {
      role: "user",
      content: input
    }
  ]
})

});






      const data = await res.json();
      const gptReply = data.choices?.[0]?.message?.content;
      setAnswer(gptReply || "No response received.");
    } catch (err) {
      setAnswer("Error fetching response. Check your API key or internet.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="app">
      <h1>DAMIEN's EpicCoach Web</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Ask a workflow question..."
          value={input}
          onChange={(e) => setInput(e.target.value)}
        />
        <button type="submit" disabled={loading}>
          {loading ? "Thinking..." : "Ask"}
        </button>
      </form>
      {answer && (
        <div className="response">
          <strong>Answer:</strong>
          <p>{answer}</p>
        </div>
      )}
    </div>
  );
}
export default App;
npm run dev

